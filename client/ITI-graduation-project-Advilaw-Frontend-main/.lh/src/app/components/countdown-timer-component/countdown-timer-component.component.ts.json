{
    "sourceFile": "src/app/components/countdown-timer-component/countdown-timer-component.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1752180764780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752237274292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Router, ActivatedRoute } from '@angular/router';\r\n+import { Router } from '@angular/router';\r\n import { Component, computed, OnDestroy, OnInit, signal, inject } from '@angular/core';\r\n import { interval, takeWhile } from 'rxjs';\r\n import { SessionService } from '../../core/services/session.service';\r\n \r\n@@ -23,24 +23,20 @@\n \r\n   _route = inject(Router)\r\n   _activatedRoute = inject(ActivatedRoute)\r\n   sessionService = inject(SessionService)\r\n-\r\n+  route = inject(ActivatedRoute);\r\n   // Progress ring properties\r\n   circumference: number = 2 * Math.PI * 90;\r\n   strokeDashoffset: number = 0;\r\n \r\n   private intervalId: any;\r\n   private blinkIntervalId: any;\r\n   private targetTime: Date = new Date();\r\n-\r\n+  sessionId: number = 1;\r\n+  appointmentTime: any;\r\n+  sessionDetails: any;\r\n   ngOnInit() {\r\n-    \r\n-    this._activatedRoute.queryParams.subscribe(params => {\r\n-      this.sessionId = params['sessionId'] ? parseInt(params['sessionId']) : null;\r\n-      console.log('Countdown component received session ID:', this.sessionId);\r\n-    });\r\n-\r\n     this.initializeTimer();\r\n     this.startTimer();\r\n     this.startBlinking();\r\n   }\r\n@@ -53,11 +49,11 @@\n       clearInterval(this.blinkIntervalId);\r\n     }\r\n   }\r\n \r\n-  private initializeTimer() {\r\n-    // Set target time to 30 minutes from now (you can adjust this)\r\n-    this.targetTime = new Date(Date.now() + 0.20 * 60 * 1000);\r\n+  private initializeTimer(startTimeStr: string) {\r\n+    this.targetTime = new Date(startTimeStr);\r\n+\r\n     this.sessionDate = this.targetTime.toLocaleString('en-US', {\r\n       year: 'numeric',\r\n       month: 'long',\r\n       day: 'numeric',\r\n@@ -65,8 +61,9 @@\n       minute: '2-digit'\r\n     });\r\n   }\r\n \r\n+\r\n   private startTimer() {\r\n     this.intervalId = setInterval(() => {\r\n       this.updateTimer();\r\n     }, 1000);\r\n@@ -103,20 +100,12 @@\n       this.totalMinutes = 0;\r\n       this.isSessionReady = true;\r\n       this.waitingMessage = 'Session is ready now! You can enter';\r\n       this.strokeDashoffset = 0;\r\n-      \r\n-      // Navigate to chat with session ID if available\r\n-      if (this.sessionId) {\r\n-        this._route.navigate(['/chat'], { \r\n-          queryParams: { sessionId: this.sessionId } \r\n-        });\r\n-        this.sessionService.startSession(this.sessionId);\r\n-      } else {\r\n-        this._route.navigate(['/chat']);\r\n-        this.sessionService.startSession(1);\r\n-      }\r\n+      this._route.navigate(['/chat']);\r\n+      this.sessionService.startSession(1);\r\n \r\n+\r\n       if (this.intervalId) {\r\n         clearInterval(this.intervalId);\r\n       }\r\n     }\r\n"
                },
                {
                    "date": 1752237426441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n-import { Router } from '@angular/router';\r\n+import { AppointmentDetailsDTO } from './../../types/Appointments/AppointmentDetailsDTO';\r\n+import { ActivatedRoute, Router } from '@angular/router';\r\n import { Component, computed, OnDestroy, OnInit, signal, inject } from '@angular/core';\r\n import { interval, takeWhile } from 'rxjs';\r\n import { SessionService } from '../../core/services/session.service';\r\n \r\n"
                },
                {
                    "date": 1752237466308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,11 +36,39 @@\n   sessionId: number = 1;\r\n   appointmentTime: any;\r\n   sessionDetails: any;\r\n   ngOnInit() {\r\n-    this.initializeTimer();\r\n-    this.startTimer();\r\n-    this.startBlinking();\r\n+\r\n+    this.route.paramMap.subscribe(params => {\r\n+      const id = params.get('sesstionId');\r\n+      if (id) {\r\n+        this.sessionId = +id;\r\n+      }\r\n+    });\r\n+    this.sessionService.getSessionDetails(this.sessionId).subscribe({\r\n+      next: (details) => {\r\n+        this.sessionDetails = details;\r\n+        this.appointmentTime = details.appointmentTime;\r\n+        const appointmentTime = this.appointmentTime;\r\n+        const durationMs = (details.durationHours || 0) * 60 * 60 * 1000;\r\n+        const now = Date.now();\r\n+        const start = new Date(appointmentTime).getTime();\r\n+\r\n+        this.initializeTimer(appointmentTime);\r\n+\r\n+        const delayUntilStart = start - now;\r\n+\r\n+        if (delayUntilStart > 0) {\r\n+          this.startTimer();\r\n+          this.startBlinking();\r\n+        } else {\r\n+          this._route.navigate([`/chat/${this.sessionId}`]);\r\n+          this.sessionService.startSession(details.durationHours, this.appointmentTime);\r\n+\r\n+\r\n+        }\r\n+      }\r\n+    });\r\n   }\r\n \r\n   ngOnDestroy() {\r\n     if (this.intervalId) {\r\n"
                },
                {
                    "date": 1752237482959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,12 +129,20 @@\n       this.totalMinutes = 0;\r\n       this.isSessionReady = true;\r\n       this.waitingMessage = 'Session is ready now! You can enter';\r\n       this.strokeDashoffset = 0;\r\n-      this._route.navigate(['/chat']);\r\n-      this.sessionService.startSession(1);\r\n+      \r\n+      // Navigate to chat with session ID if available\r\n+      if (this.sessionId) {\r\n+        this._route.navigate(['/chat'], { \r\n+          queryParams: { sessionId: this.sessionId } \r\n+        });\r\n+        this.sessionService.startSession(this.sessionId);\r\n+      } else {\r\n+        this._route.navigate(['/chat']);\r\n+        this.sessionService.startSession(1);\r\n+      }\r\n \r\n-\r\n       if (this.intervalId) {\r\n         clearInterval(this.intervalId);\r\n       }\r\n     }\r\n"
                },
                {
                    "date": 1752237692780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,12 +19,10 @@\n   waitingMessage: string = 'Please wait until the session begins';\r\n   sessionDate: string = '';\r\n   isSessionReady: boolean = false;\r\n   isBlinking: boolean = false;\r\n-  sessionId: number | null = null;\r\n \r\n   _route = inject(Router)\r\n-  _activatedRoute = inject(ActivatedRoute)\r\n   sessionService = inject(SessionService)\r\n   route = inject(ActivatedRoute);\r\n   // Progress ring properties\r\n   circumference: number = 2 * Math.PI * 90;\r\n@@ -129,20 +127,12 @@\n       this.totalMinutes = 0;\r\n       this.isSessionReady = true;\r\n       this.waitingMessage = 'Session is ready now! You can enter';\r\n       this.strokeDashoffset = 0;\r\n-      \r\n-      // Navigate to chat with session ID if available\r\n-      if (this.sessionId) {\r\n-        this._route.navigate(['/chat'], { \r\n-          queryParams: { sessionId: this.sessionId } \r\n-        });\r\n-        this.sessionService.startSession(this.sessionId);\r\n-      } else {\r\n-        this._route.navigate(['/chat']);\r\n-        this.sessionService.startSession(1);\r\n-      }\r\n+      this._route.navigate(['/chat/' + this.sessionId]);\r\n+      this.sessionService.startSession(this.sessionDetails.durationHours, this.appointmentTime);\r\n \r\n+\r\n       if (this.intervalId) {\r\n         clearInterval(this.intervalId);\r\n       }\r\n     }\r\n@@ -169,5 +159,5 @@\n \r\n   formatTime(time: number): string {\r\n     return time.toString().padStart(2, '0');\r\n   }\r\n-}\r\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1752180764780,
            "name": "Commit-0",
            "content": "import { Router, ActivatedRoute } from '@angular/router';\r\nimport { Component, computed, OnDestroy, OnInit, signal, inject } from '@angular/core';\r\nimport { interval, takeWhile } from 'rxjs';\r\nimport { SessionService } from '../../core/services/session.service';\r\n\r\n@Component({\r\n  selector: 'app-countdown-timer-component',\r\n  imports: [],\r\n  templateUrl: './countdown-timer-component.component.html',\r\n  styleUrl: './countdown-timer-component.component.css'\r\n})\r\nexport class CountdownTimerComponentComponent implements OnInit, OnDestroy {\r\n  hours: number = 0;\r\n  minutes: number = 0;\r\n  seconds: number = 0;\r\n  totalMinutes: number = 0;\r\n\r\n  waitingMessage: string = 'Please wait until the session begins';\r\n  sessionDate: string = '';\r\n  isSessionReady: boolean = false;\r\n  isBlinking: boolean = false;\r\n  sessionId: number | null = null;\r\n\r\n  _route = inject(Router)\r\n  _activatedRoute = inject(ActivatedRoute)\r\n  sessionService = inject(SessionService)\r\n\r\n  // Progress ring properties\r\n  circumference: number = 2 * Math.PI * 90;\r\n  strokeDashoffset: number = 0;\r\n\r\n  private intervalId: any;\r\n  private blinkIntervalId: any;\r\n  private targetTime: Date = new Date();\r\n\r\n  ngOnInit() {\r\n    \r\n    this._activatedRoute.queryParams.subscribe(params => {\r\n      this.sessionId = params['sessionId'] ? parseInt(params['sessionId']) : null;\r\n      console.log('Countdown component received session ID:', this.sessionId);\r\n    });\r\n\r\n    this.initializeTimer();\r\n    this.startTimer();\r\n    this.startBlinking();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.intervalId) {\r\n      clearInterval(this.intervalId);\r\n    }\r\n    if (this.blinkIntervalId) {\r\n      clearInterval(this.blinkIntervalId);\r\n    }\r\n  }\r\n\r\n  private initializeTimer() {\r\n    // Set target time to 30 minutes from now (you can adjust this)\r\n    this.targetTime = new Date(Date.now() + 0.20 * 60 * 1000);\r\n    this.sessionDate = this.targetTime.toLocaleString('en-US', {\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  }\r\n\r\n  private startTimer() {\r\n    this.intervalId = setInterval(() => {\r\n      this.updateTimer();\r\n    }, 1000);\r\n  }\r\n\r\n  private startBlinking() {\r\n    this.blinkIntervalId = setInterval(() => {\r\n      this.isBlinking = !this.isBlinking;\r\n    }, 1500);\r\n  }\r\n\r\n  private updateTimer() {\r\n    const now = new Date().getTime();\r\n    const targetTime = this.targetTime.getTime();\r\n    const timeDifference = targetTime - now;\r\n\r\n    if (timeDifference > 0) {\r\n      this.hours = Math.floor(timeDifference / (1000 * 60 * 60));\r\n      this.minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));\r\n      this.seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);\r\n      this.totalMinutes = Math.floor(timeDifference / (1000 * 60));\r\n\r\n      // Update progress ring\r\n      const totalSeconds = this.hours * 3600 + this.minutes * 60 + this.seconds;\r\n      const initialSeconds = 30 * 60; // 30 minutes\r\n      const progress = (initialSeconds - totalSeconds) / initialSeconds;\r\n      this.strokeDashoffset = this.circumference * (1 - progress);\r\n\r\n      this.updateWaitingMessage();\r\n    } else {\r\n      this.hours = 0;\r\n      this.minutes = 0;\r\n      this.seconds = 0;\r\n      this.totalMinutes = 0;\r\n      this.isSessionReady = true;\r\n      this.waitingMessage = 'Session is ready now! You can enter';\r\n      this.strokeDashoffset = 0;\r\n      \r\n      // Navigate to chat with session ID if available\r\n      if (this.sessionId) {\r\n        this._route.navigate(['/chat'], { \r\n          queryParams: { sessionId: this.sessionId } \r\n        });\r\n        this.sessionService.startSession(this.sessionId);\r\n      } else {\r\n        this._route.navigate(['/chat']);\r\n        this.sessionService.startSession(1);\r\n      }\r\n\r\n      if (this.intervalId) {\r\n        clearInterval(this.intervalId);\r\n      }\r\n    }\r\n  }\r\n\r\n  private updateWaitingMessage() {\r\n    const messages = [\r\n      'Please wait until the session begins',\r\n      'We are preparing everything for your upcoming session',\r\n      'You will be notified when the session starts',\r\n      'Thank you for your patience, the session will begin soon'\r\n    ];\r\n\r\n    if (this.totalMinutes > 20) {\r\n      this.waitingMessage = messages[0];\r\n    } else if (this.totalMinutes > 10) {\r\n      this.waitingMessage = messages[1];\r\n    } else if (this.totalMinutes > 5) {\r\n      this.waitingMessage = messages[2];\r\n    } else {\r\n      this.waitingMessage = messages[3];\r\n    }\r\n  }\r\n\r\n  formatTime(time: number): string {\r\n    return time.toString().padStart(2, '0');\r\n  }\r\n}\r\n"
        }
    ]
}